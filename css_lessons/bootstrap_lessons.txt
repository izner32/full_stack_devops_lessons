// LESSON 2.1 - CONTAINERS 
container: max-width | container 
container-fluid: 100% (100% width of the browser)
container-{br}: 100% breakpoint (they become 100% when it reaches this point)

br: this means stop shrinking when you reach this point
    sm: 576px
    md: 768px
    lg: 992px
    xl: 1200px
    xxl: 1200px
    fluid: 100%

// LESSON 2.2 - COLORS 
bg-{color} | background color 
text-{color} (equivalent of writing color:) | text color 
link-{color} (these classes have a :hover and :focus state ) | link color 

color:
    primary: blue 
    secondary: gray
    success: green 
    danger: red 
    warning: yellow 
    info: light blue 
    light: white 
    dark: black 

there are also color variables you can access when working with vanilla css 
--bs-blue 
--bs-indigo 
... and so on (look at documentation)

// LESSON 2.3 - SPACING 
p{dir}-{amt} (e.g. pt-2) | paddings
m{dir}-{amt} (e.g. m-2, for all four sides)| margin 
gap-{amt} | gap

dir: 
    t: top
    e: end(right) 
    b: bottom 
    s: start(left)
    x: horizontal (left and right)
    y: vertical (up and down)

amt: 
    0,1,2,3,4,5 (margin has auto, padding doesnt have it)

// LESSON 2.4 - DISPLAY 
d-{val} | display 
d-{br}-{val} (e.g. d-md-block when it reaches medium breakpoint display block) | display with breakpoint 
d-print-{val} | contextual printing, tbh idk what diz is 

val:
    none: invisible
    inline: occupy necessary width and height but width and height cannot be modified
    inline-block: occupy necessary width and height but width and height can be modified
    block: spanning across the whole containing element
    grid: used for 2d layout 
    table
    table-cell 
    table-row 
    flex: used for 1d layout 
    inline-flex: wrapping container becomes inline 

br: this means stop shrinking when you reach this point
    sm: 576px
    md: 768px
    lg: 992px
    xl: 1200px
    xxl: 1200px
    fluid: 100%

// LESSON 2.5 - POSITION - lmao why would you position with bootstrap i think it's way harder this way 
position-{val} | position 
{pro}{pos} | position the element 

val: 
    static 
    relative 
    absolute
    fixed 
    sticky 

pro: 
    top 
    start 
    bottom 
    end 

pos: 
    0 
    50 
    100

translate: 
    translate-middle

// LESSON 3.1 - TYPOGRAPHY STYLES ( TEXT PROPERTIES )
font sizes 
h1,h2,h3,h4,h5,h6 | y diz r classes in butstrap?
fs-1,fs-2,fs-3,fs-4,fs-5,fs-6 | corresponds to the sizes of h1...h6 element but without the boldness 
display-1...display-6 | bigger than headlines 
lead | to make text stand out ( a lil bit bigger compared to surrounding text no matter where it is )

weight/styles 
fw-{wgt} | font weight 
fst-{stl} | font style 
lh-{hgt} | line height 
text-{br}-{typ} | text alignment (used inside the text of a block) | br is optional
text-decoration-{typ} | text decoration 

wgt: 
    lighter
    light 
    normal 
    bold 
    bolder 

stl: 
    italic 
    normal 

hgt: 
    l
    sm 
    base 
    lg 

br: 
    sm 
    md 
    lg 
    xl 

typ(text alignment): 
    start 
    center 
    end 

typ(text decoration):
    underline
    line-through
    none

// LESSON 3.2 - TYPOGRAPHY MODIFICATIONS 
text-{typ} | text wrapping/breaking
text-{typ} | text transform (like capitalizing)
align-{typ} | vertical alignment (vertical equivalent of text align)

miscalleneous 
text-reset | adapts the text properties of parent element (applied to child element)

typ(wrapping/breaking):
    wrap 
    nowrap
    break: applied on a very long word

typ(transform):
    lowercase
    uppercase
    capitalize

typ(vertical alignemnt)
    baseline
    top 
    middle 
    bottom 
    text-top 
    text-bottom 

// LESSON 3.3 - BLOCKQUOTES AND SIMPLE LISTS 
blockquote: applied to container, these makes the font size a little bit bigger 
blockquote-footer: applied to figcaption elements, especially useful for quotes by and like that 
list-{typ}

typ:
    unstyled: remove stylings of the list 
    inline
    inline-item

// LESSON 3.4 - LIST GROUPS 
list-group: wrap your list with these 
list-group-item: add this on each of the list item 
list-group-flush: remove borders of list group 
list-group-item-action: what you want to happen when hovering on each list item (applied on button or links)
list-group-horizontal-{br}: item starts at rows but then become column after reaching a certain breakpoint  
list-group-item-{col}: change the background color of list item 

additional modifier (add these classes and html attributes on the list items you want )
active | attribute: aria-current="true"
disabled | attribute: tabindex="-1" aria-disabled="true"

// LESSON 3.5 - TABLES 
table
table-{typ}: apply color to the whole table, applied to table element | you could also apply these into table row( tr element ) or each table cell
table-bordered: applied to parent element
table-borderless
border-{typ} | apply to color of border 
table-responsive-{typ}: adding breakpoint, when br is reached it adds a horizontal scrollbar 
align-{typ}: applied to table cell (td)

typ: 
    primary 
    secondary 
    success 
    danger 
    warning 
    info 
    light 
    dark 

typ(only applied to parent element):
    striped
    hover
    sm

typ(border):
    primary
    secondary 
    and so on...

typ(table-responsive):
    sm
    md
    and so on...

// LESSON 3.6 - IMAGES AND FIGURES 
img-fluid: automatic responsive that adjusts based on the viewport, sets the width to 100% and height to auto 
img-thumbnail: meh 

float-start: float left | applied to element you wanted to float 
float-end: float at the end 
clearfix: applied to parent element 

figure: applied to figure element 
figure-img : applied to img element 
figure-caption : applied to figure caption element 

// LESSON 3.7 - BORDERS 
border: 4 sides of border 
border-{sid}: adding border line on specific side 
border-0: remove all 4 sides of border 
border-0-{sid}: remove specific side of border 
border-{col}: contextual borders | adding color to border 
border-{num}: how thick the border 
rounded-{typ/sid/num}: border radius 

sid:
    top
    end 
    bottom 
    start 

col: 
    primary 
    secondary 
    and so on...

num: 
    1,2,3,4,5

typ:
    circle
    pill

// LESSON 4.1 - BOX MODIFICATIONS 
these borders are already covered from the lessons above 
border 
border-{sid}
border-0-{sid}
border-{col}
border-{num}
rounded-{typ/sid/num}

shadow 
shadow-{siz}: for size of shadows, mostly applied to images or parent elemetns 

size:
    none
    sm 
    lg 

// LESSON 4.2 - SIZES AND RATIOS 
w-{typ}: width 
h-{typ}: height 
ratio: applied mostly in videos and images 
ratio-{val}

type: 
    25 
    50: 50% of the container 
    75
    100
    auto: automatically calculate matching the container 
    mw-100(mh-100 for height): maximum width is 100% of the container 
    vw-100(vh-100 for height): 100% of the viewport width 

val: 
    1x1 
    4x3
    16x9
    21x9

// LESSON 4.3 - INTERACTIVITY CLASSES 
overflow-{typ}: applied to text container 
stretched-link: applied mostly to a and button (make the parent element clickable too)
user-select-{typ}: applied mostly to text interactivity 

pe-{typ}: pointer events 
must add these for pe-none: tabindex="-1" aria-disabled="true"

typ: 
    auto:adds scroll bar automatically when needed
    hidden: just hide the overflow text 
    visible 
    scroll: add scroll bar no matter what 
    
typ(user select):
    auto: the default normal  
    all: if one has been selected all would be selected 
    none: nothing can be clickable 

typ(pe):
    non: cant click 
    auto: can be clickable 

// LESSON 5.1 - BASIC GRID LAYOUT 
container: grid parent 
row: grid item in row 
col: grid item in column 

// LESSON 5.2 - ROWS - designed to be column container, negative margins, reset grid 
row
g-{dir}-{siz}: used in row gutter 
row-cols-{siz}: e.g. row-cols-3, automatically creates 3 column with 1 row 

dir:    
    x 
    y 

siz: 
    1,2,3,4,5


<div class ="container"> <!-- apparently this is how you make grid layout in bootstrap this is technically not a grid -->
    <div class="row">
        <div class="col">
        <div class="col">
    </div>
    <div class="row">
        <div class="col">
    </div>
</div>

// LESSON 5.3 - RESPONSIVE COLUMNS - align to grid, standalone(can use without rows), use on content 
col-{br}-{siz}: e.g. col-sm-6 means at the small breakpoint this should take up six of the 12 columns unit
col-{siz}: e.g. col-3 means it would initially take up only 3 columns unit out of 12 column unit 
order-{br}-{ord}: e.g. order-sm-2 means the order of this element would be on 2nd when it reaches the sm breakpoint
offset-{br}-{pos}: think of this as what column unit out of 12 should it the element start | applied on element where col is applied 

br:
    sm 
    md 
    and so on ...

siz:
    1,2,3,4,5,6...

ord: 
    1,2,3,4,5

pos: 
    1,2,3,4,5,6,7,8,9,10,11

// LESSON 5.4 - FLEXBOX METRICS 
d-{br}-{inline}-flex: inline is optional | e.g. d-md-flex if it reaches the medium breakpoint make this a flexbox
flex-{br}-{typ}-{reverse}: reverse is optional | e.g. flex-md-column, display them as flex but if it reaches breakpoint make them column | reverse reverses the order and makes the position go to end | flex-{typ}-{reverse} is also possible 
justify-content-{br}-{typ}: applied only to flex parents 
align-items-{br}-{typ}: br is optional | e.g. align-items-baseline, aligns at the top, applied to the parent flex

br:
    sm 
    md 
    and so on ...

typ(flex): 
    row 
    column

typ(justify content)
    start 
    end 
    center 
    between: puts space in between them 
    around: just like betewen but there is also space from start and end 
    evenly: just like evenly but the spaces are even

typ(vertical alignment)
    start 
    end 
    center 
    baseline 
    stretch: stretch to contain the whole container vertically

// LESSON 5.5 - FLEXBOX CONTENT - content fit 
align-self-{br}-{typ}: br is optional | applied to flex items | e.g. align-self-md-start, if it reaches medium breakpoint align the item vertically at the top 
flex-{br}-fill: applied at item flex, make the item fill the remainign space 
flex-{br}-{typ}-{bool}: flex grow/shrink | if bool is 1 then make it look like flex-fill | if you're shrinking item, other item should grow or you wouldn't notice that much difference 

br:
    sm 
    md 
    and so on ...

typ(justify content)
    start 
    end 
    center 
    between: puts space in between them 
    around: just like betewen but there is also space from start and end 
    evenly: just like evenly but the spaces are even

typ(flex grow/shirnk)
    grow 
    shrink 

bool 
    0 
    1

// LESSON 5.6 - FLEXBOX ORGANIZATION 
for flex wrapping, flex tries to fit everything into a single line, once you start decreasing the viewport the flex items shrink until they can't anymore and now you have to scroll horizontally to view other flex items, to fix this we use flex wrap to make overflowing item go below instead of scorlling to see them 
flex-{br}-{typ}-{reverse}: nowrap is the default | br is optional | applied to to parent flex 
order-{br}-{amt}: br is optional, applied to flex item | rearrange the order 
align-content-{br}-{typ}: br is optional, aligning vertically the content 

br:
    sm 
    and so on...

typ: 
    wrap 
    nowrap 

amt: 
    first 
    0,1,2,3,4,5
    last

typ(align-content)
    start
    end
    center
    between
    around
    stretch

// LESSON 6.1 - BUTTONS 
btn :applied to button, a or input | if applied on a, add attribute role="button"
btn-{outline}-{typ}: outline is optional | btn class must be applied first 
btn-{siz}: btn-sm or btn-lg | size of button 
btn-group/btn-group-vertical | grouping bottons | btn-group-vertical is like flex column direction 
btn-group-sm/btn-group-lg | grouping buttons with specified sizes 
btn-check: checkbox/radio 

typ: 
    primary 
    secondary 
    and so on...

// LESSON 6.2 - NAVS 
nav 
nav-item 
nav-link 

nav-tabs: design on how nav would look like when active, applied to element with nav class 
nav-pills: same as nav tabs but much better i think 

nav-fill: just like flex fill, applied to element with nav class
nav-justified

<ul class="nav>
    <li class="nav-item">
        <a class="nav-link">Home</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" aria-current="page">About</a>
    </li>
    <li class="nav-item">
        <a class="nav-link">Project</a>
    </li>
</ul>

// LESSON 6.3 - NAVBAR - just copy this one from the docu 
BASIC NAVBAR 
    navbar 
    bg-{col}: yknow what color is
    navbar-{col}: light/dark color only 
    navbar-expand-{br}: yknow what br is: sm,md,lg,... without fluid

INSIDE NAVBAR 
    container-{br}: sm,md...with fluid
    navbar-nav 
    nav-item 
    nav-link 

    navbar-brand: your logo 
    nav-text

    goodshit for mobile 
    navbar-toggler-{icon}: icon is optional 
    collapse 
    navbar-collapes 
    id 

typical navbar 
<nav class="navbar navbar-expand-lg bg-secondary navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand>Renz</a>
        <button class="navbar-toggler" type="buttom" data-bs-toggle="collapse" data-bs-target="#navbarTarget" aria-control="navbarText" aria-expanded="false" aria-label="toggle navigation">
            <span class="navbar-toggler-icon></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarText">
            <div class="navbar-nav">
                <a class="nav-item nav-link active" aria-current="page" href="#">Bubbles</a>
                <a class="nav-item nav-link" href="#">Bubbles</a>
            </div>
        </div>
    </div>
</nav>

// LESSON 6.4 - CARDS 
card: container 
card-group: container for multiple individual cards 

inside card container 
card-header 
card-footer 
card-body 
card-img-{typ}: typ is optional | top(image is at the top),bottom,overlay

inside card-body 
card-title 
card-subtitle
card-text 
card-link

<div class="card" style="width: 18rem;">
  <img src="..." class="card-img-top" alt="...">
  <div class="card-body">
    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
  </div>
</div>

// LESSON 6.5 - PAGINATION 
pagination 
pagination-{siz}

page-{typ}

siz: 
    sm 
    lg 

<nav aria-label="Page navigation example">
  <ul class="pagination">
    <li class="page-item"><a class="page-link" href="#">Previous</a></li>
    <li class="page-item"><a class="page-link" href="#">1</a></li>
    <li class="page-item"><a class="page-link" href="#">2</a></li>
    <li class="page-item"><a class="page-link" href="#">3</a></li>
    <li class="page-item"><a class="page-link" href="#">Next</a></li>
  </ul>
</nav>

// LESSON 6.6 - PROGRESS 
progress 
progress-bar-{typ}

typ:
    striped 
    animated 

<div class="progress">
  <div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
</div>
<div class="progress">
  <div class="progress-bar" role="progressbar" style="width: 25%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
</div>
<div class="progress">
  <div class="progress-bar" role="progressbar" style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
</div>
<div class="progress">
  <div class="progress-bar" role="progressbar" style="width: 75%" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
</div>
<div class="progress">
  <div class="progress-bar" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
</div>

// LESSON 6.7 - SPINNER - for loading 
spinner-border 
spinner-circle

<div class="spinner-border text-success">
    <span class="visually-hidden">Loading...</span>
</div>

// LESSON 6.8 - BRADGES AND BREADCRUMBS 
badge 
    rounded-pill

breadcrumbs: somehow like the nav 

<h1>Example heading <span class="badge bg-secondary">New</span></h1>

<nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="#">Home</a></li>
    <li class="breadcrumb-item active" aria-current="page">Library</li>
  </ol>
</nav>

// LESSON 7.1 - CAROUSEL - like gallery sldier 
carousel 
data-bs-ride 
slide 
carousel-fade 
carousel inner 
carousel-item
class="d-block w-100" active 

button controls 
carousel-control-{typ}
carousel-control-prev-icon
typ: 
    prev 
    next 

<div id="carouselExampleControls" class="carousel slide" data-bs-ride="carousel">
  <div class="carousel-inner">
    <div class="carousel-item active">
      <img src="..." class="d-block w-100" alt="...">
    </div>
    <div class="carousel-item">
      <img src="..." class="d-block w-100" alt="...">
    </div>
    <div class="carousel-item">
      <img src="..." class="d-block w-100" alt="...">
    </div>
  </div>
  <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
  </button>
  <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Next</span>
  </button>
</div>

// LESSON 7.2 - ACCORDION - like dropdown text

I WONT COVER THIS COMPONENTS IN DETAIL ANYMORE, IT'S NOT LIKE I'M GONNA MEMORIZE THEM ANYWAYS, THIS IS THE PART OF THE BOOTSTRAP WHERE I'D JUST COPY FROM THE DOCUMENTATION 

// LESSON 7.3 - ALERT - uhmm alert 

// LESSON 7.4 - TOAST - it's like uhm when you click on it a pop up appears that somehow looks like a notification

// LESSON 7.5 - MODAL - like a popup page these could usually be seen from signup/signin 

// LESSON 7.6 - COLLAPSE - like accordion, when clicked a text would appear 

// LESSON 7.7 - DROPDOWNS - dropdown choices, usually used for menus 

// LESSON 7.8 - TOOLTIPS - like a small popup when you hover onto something 

// LESSON 7.9 - POPOVERS - just like tooltips except they remain on page after clicked on 

// LESSON 7.10 - SCROLLSPY - mostly applied to Automatically update Bootstrap navigation or list group components based on scroll position to indicate which link is currently active in the viewport.



