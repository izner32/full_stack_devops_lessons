/* 
default styles by renz carillo, using normalize.css and additional designs
- normalize css
- flexCenter function that automatically centers using flex
- maximum width of 50 em as breakpoint so the site would stop growing at this point
- margin of zero for all elements
- creating default variables such as primary fonts and colors
- modified from normalize.css: remove margin properties in h1
*/

@mixin flexCenter() {
    display: flex;
    justify-content: center;
    align-items: center;
}

// setting up a variable, values we would always use
:root {
    --clr-primary: white; // primary color
    --clr-secondary: black;

    --ff-primary: "Myriad Pro Regular";
    // --ff-secondary:
}

/* Document
   ========================================================================== */

/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */

html {
    line-height: 1.15; /* 1 */
    -webkit-text-size-adjust: 100%; /* 2 */
    box-sizing: border-box; /*content-box is the default, border-box is referring to the height and width of the border of the box; */
}

* {
    margin: 0;
}

*,
*:before,
*:after {
    box-sizing: inherit;
}

/* Sections
   ========================================================================== */

/**
 * Remove the margin in all browsers.
 */

body {
    margin: 0;
}

/**
 * Render the `main` element consistently in IE.
 */

main {
    display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */

h1 {
    font-size: 2em;
    // margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
    box-sizing: content-box; /* 1 */
    height: 0; /* 1 */
    overflow: visible; /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

pre {
    font-family: monospace, monospace; /* 1 */
    font-size: 1em; /* 2 */
}

/* Text-level semantics
   ========================================================================== */

/**
 * Remove the gray background on active links in IE 10.
 */

a {
    background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
    border-bottom: none; /* 1 */
    text-decoration: underline; /* 2 */
    text-decoration: underline dotted; /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
    font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
samp {
    font-family: monospace, monospace; /* 1 */
    font-size: 1em; /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */

small {
    font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sub {
    bottom: -0.25em;
}

sup {
    top: -0.5em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove the border on images inside links in IE 10.
 */

img {
    border-style: none;
}

/* Forms
   ========================================================================== */

/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */

button,
input,
optgroup,
select,
textarea {
    font-family: inherit; /* 1 */
    font-size: 100%; /* 1 */
    line-height: 1.15; /* 1 */
    margin: 0; /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */

button,
input {
    /* 1 */
    overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select {
    /* 1 */
    text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */

button,
[type="button"],
[type="reset"],
[type="submit"] {
    -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */

fieldset {
    padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */

legend {
    box-sizing: border-box; /* 1 */
    color: inherit; /* 2 */
    display: table; /* 1 */
    max-width: 100%; /* 1 */
    padding: 0; /* 3 */
    white-space: normal; /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
    vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */

textarea {
    overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */

[type="checkbox"],
[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
    height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */

[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */

[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
    -webkit-appearance: button; /* 1 */
    font: inherit; /* 2 */
}

/* Interactive
   ========================================================================== */

/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */

details {
    display: block;
}

/*
 * Add the correct display in all browsers.
 */

summary {
    display: list-item;
}

/* Misc
   ========================================================================== */

/**
 * Add the correct display in IE 10+.
 */

template {
    display: none;
}

/**
 * Add the correct display in IE 10.
 */

[hidden] {
    display: none;
}

/**
 * Create a breakpoint to where the site would stop growing
 */

body {
    max-width: 50em;
    margin: 0 auto;
}

/* start designing for mobile */

/* harvard way: 1200px and 768px - tablet styles  */
@media screen and (min-width: 768px) {
}

/* desktop styles */
@media screen and (min-width: 1200px) {
}

// remove all default margins and padding (done in this default styles)
// flattening grandchildren solution for long bem naming conventions
// always have a block element wrapping an inline element (because you can easily make division with grid-template-columns/rows if the child is a block element)
/*

use bem like this with namespacing technique

<ul class="l-grid">
    <li class="l-grid__item l-grid__item--light">
        <div class="c-card">
            <div class="c-card__header">
                […]
            </div>
            <div class="c-card__body">
                […]
            </div>
        </div>
    </li>
    <li class="l-grid__item">
        <div class="c-card">
            <div class="c-card__header">
                […]
            </div>
            <div class="c-card__body">
                […]
            </div>
        </div>
    </li>
</ul>

you only use modifier if the element has a sibling that has the same class name 
e.g. 
<li class ="list">list1</li>
<li class ="list list--active">list2</li>
<li class ="list">list3</li>

we want the list2 to become red when clicked, so we add bem modifier with it

we dont use bem modifier like this 
<h2 class ="header">Heading</h2>
<p> class ="conter--active"Content</p> 
there is only 1 p, no need to add active
*/

//using scss with bem
.l-grid {
    &__item {
        &--light {
        }

        .c-card {
            &__header {
            }
            &__body {
            }
        }
    }
}

// using namespaces techniques

// using media queries
/*
3 column layout - desktop | if desktop has 3 column it shrink downs to 1 column if in mobile
2 column layout - tablet
1 column layout - mobile 
*/

// IMPORTANT CONCEPTS IN CSS
/* 
- Everything is a quadrilateral in css : Everyone has height,width,padding,margin,border
- There are essentialy only 3 types of layout: inline,block,inline-block
- Inline: only occupies the necessary space, you can't modify width and height, you can modify margin(only left and right) and padding
- Block: width occupies the whole span of screen by default, height is decided by the content by default, can modify width and height
- Inline-Block: occupies necessary space at default but you can modify the width and height.
- Overlapping margin collapses between two blocks
- You can't wrap a block with an inline: <a><p></p></a> is not allowed
- A content would only overflow if you specified a fixed width and height but the words are too many, to fix use overflow property
- Some css properties are automatically inherited by the child elements, examples are: all text properties (not sure), important mention: padding,margin,width and height are not default inherited in parents
- px: looks the same in mobile and laptop screen, em: size is relative to its parent(e.g. parent 16px, child 2em(32px), grandchildren 2em(64px)), rem: size relative to html (html has default 16px)
- Position
    static - default value of an element
    sticky - element is positioned based on the user's scroll position
    
    change normal document flow + positioning content - absolute, relative, fixed
    normal document flow -> block elements stacking on top of each other 
    position:absolute; -> remove from normal document flow -> width and height of the element is adjusting to take up only as much space as it requires (its somehow becoming like inline-block element) -> positioning with top,left,right,down is relative based on the parent element(parent and above(grandparent,great grandparent,...) element that has property of not static, if there is no parents and above that has no position other than static then the html element) -> default position is 0 margin at top and left of parent element(even if position:static it's okay)
    position:relative; -> not removed from normal document flow -> width and height isnt adjusting to fit like in absolute -> positioning with top,left,down,right relative based on initial position not on any parent element -> default position is at current initial position
    position:fixed; -> removed from normal document flow -> width and height is adjusting just like in absolute -> positioning with top,left,down,right is relative based on viewport (yes, not on parents) ->default position is at initial current position
- Centering
    inline - margin: 0 auto;
    block - text-align:center;
    container(block) - display:flex; align-items:center; justify-content:center;
    position(block/inline)(used for when the width isn't 100% or isn't spanning across the whole screen, wait position somehow converts block into inline) - position:absolute/(or)fixed; top:50%; left:50%; transform: translate(-50%, -50%);
- Use rem for font sizes,margin,padding and almost everything to make it relative to screen, use px super less
- Use bem for naming conventions (use grandchildren solution to avoid nesting problems) | use sass with bem | use css module to avoid naming problems across multiple components in react | use namespacing techniques with bem 
- Use normalize css sheet to make it consistent across all browsers
- use grid for layout header,footer,sections, grid makes every grid item a block  | use flexbox for alignment inside the section, flex makes every flex item an inline

- Grid
    - grid container will determine the height and width of each container of the grid item, for each grid item we can set its own width and heights, that's pretty much what you need to know
    - if using grid-template-columns/rows, it is a good practice to make the grid items a block
    - fr is based on viewport 
- start designing with mobile first layout (MOBILE - 576PX | TABLET - 768PX | LAPTOP - 992PX (OPTIONAL) | DESKTOP - 1200PX) We'll only go with tablet and desktop, we'll treat tablet as mobile
    .container {
        display:grid;

        // assign width and height for each of these grid items 
        grid-template-columns: 100px;
        grid-template-rows: 200px 400px 600px 200px 100px;

        // assign how it would look like
        grid-template-areas: // start with mobile
        "header"
        "nav"
        "main"
        "section"
        "footer"; 
    }
    .header {
        grid-area:header;
        // since this is a grid item, don't attempt to put a width and height on this, width and height has been assigned from the grid parent
    }
    ... and so on, do this for other grid items too

    .header .div1 { // main has a div1, since div1 isnt a grid item you can edit its width and height
        /* grid item .header has a 100px width and a 200px height, you can insert a .div1 inside of it that only has a height of 100px and it would perfectly be fine
        width:100px;
        height:100px;
    }

    @media screen and (min-width:768px){ // start making some one column into two columns
        .container{
            display:grid;
            grid-template-areas: 
            "header nav"
            "main main"
            "section section"
            "footer footer"
        }
        .header {
            grid-area:header;
        }
        ... and so on, do this for other grid items too
    @media screen and (min-width:1200px){
        /* just do what i did above, make some 2 columns into 3 columns
    }
*/
